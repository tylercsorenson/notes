VOCAB
# - Hash sign, indicates preprocessor directive such as #include
this is a statement; - Statement of code ends with semicolon
using - using directive, eg using namespace
std::cout - explicit qualification, alternative to "using" directive
<< - insertion operator
{} - (curly) braces
[] - brackets
<> - angle brackets

VARIABLE TYPES AND INITIALIZATION
int myInt - myInt is the identifier
int myInt = 0; - c-like initialization
int myInt (0); - constructor initialization
int myInt {0}; - uniform initialization
*All three methods of initialization are equivalent
int foo = 0;
auto bar = foo;
decltype(foo) bar;
*In both cases bar is given the same type as foo
#define MY_CONST 3.14159 - Alternative to const MY_CONST 3.14159

MATH AND OPERATORS
++x - evaluates to final value of x
x++ - evaluates to value of x before increase
, - separates two or more expressions that are included where only 1 is expected. Right most expression is used if the set must be evaluated for a value
myInt = (int) myFloat; myInt = int (myFloat); - Assigns int version of myFloat to myInt
sizeof() - Returns size is bytes
double myExponent = 6.02e23;
Order of operations: (), !, */%+-, < <= > >=, == !=, &&, ||

TEMPLATES
template <class T> (OR template <typename T>)
T myFunction (T a, T b) {
    return a + b;
}
x = myFunction<int>(10, 20); (OR x = myFunction(10, 20);) - Don't need the type in angle brackets if the type(s) is/are unambiguous

template <class T, int N> - N must be a constant/literal (not a variable)

NAMESPACES
namespace identifier
{
    named_entities (eg int a, b;)
}

"using" introduces a name into the current declarative region, which means you don't need to qualify the name
using myNamespace::myVariable;
cout << myVariable; - Normally would need to put myNamespace::myVariable
using namespace std;

namespace newName = currentName;

global or namespace variables use static storage, and are automatically initialized to 0
local variables within a block are not automatically initialized.

namespace myNamespace {
   class MyClass {};
}
myNamespace::MyClass yeet;

DYNAMIC MEMORY
foo = new int [5]; - If there isn't adequate memory, an exception will be thrown
foo = new (nothrow) int [5]; - If there isn't enough memory on heap, foo will be nullptr

STRUCTS
struct myStruct {
//members
} myStruct1, myStruct2; - If you declare instances of the struct like this, you don't need to create an identifier for the struct
*Access members via dot/-> notation because default visibility of members is public

ALIASES
typedef existing_type new_type_name; - Creates a type alias
typedef char C;
typedef unsigned int WORD;        //Examples
typedef char * pChar;
typedef char field [50]; - field now represents the type char[50]

using new_type_name = existing_type; - Alternate method to create type alias
using C = char;
using WORD = unsigned int;
using pChar = char *;
using field = char [50];

UNIONS
union type_name {
member_type1 member_name1;
member_type2 member_name2;
} object name(s); - All members occupy the same space in memory, so altering one alters all of them

If a union is part of a class/struct it doesn't need to have a name, you can just directly access the members inside with dot notation
struct book {
    union {
    int myInt;    //Access myInt via book1.myUnion.myInt
    } myUnion;
} book1;

struct book {
    union {
    int myInt;    //Access myInt via book1.myInt
    };
} book1;

ENUMS
enum Enum {
    value1,
    value2
} myEnumVariable;   //Creates new Enum object called myEnumVariable that can be assigned one of the values in the enum. The values are represented as integers starting at 0

enum class Enum {  //Can replace "class" with "struct"
    value1,
    value2
};

Enum myEnum;
myEnum = Enum::value1; //myEnum has value1 as its value (which is type enum)

enum class myEnum : char {value1, value2}; //Objects of myEnum are represented by char in this class

FUNCTIONS
inline string myFunction() - Tells the compiler that inline expansion is preferred over the usual function call mechanism
Function declaration only needs to include the parameter types, not necessarily their names
Overloaded functions - two functions that have the same name, but different parameters

myVariable = (condition) ? expressionWhenTrue : expressionWhenFalse;

STRINGS AND CHARACTERS
myString.at(index) = toupper(myString.at(index)); //Capitalize or edit character in a string
myString.append(string2);
isalpha(myChar), isdigit(myChar), isspace(myChar), isalnum(myChar), islower(myChar), isupper(myChar), isblank(myChar), isxdigit(myChar), ispunct(myChar), isprint(myChar), is cntrl(myChar) //Return true or false
toupper(myChar), tolower(myChar) //Return result of operations
myString.find(item) //Returns index of first appearance of item, or string::npos if not found
myString.find(item, index) //Starts at index
myString.substr(index, length)
myString.erase(index, length)
myString.push_back(myChar)
myString.insert(index, subStr)
myString.replace(index, length, subString)

LOGIC AND FLOW CONTROL
For loop - 3 fields in for loop are optional, but the 2 semicolons must be included
For loop - can use comma operator to use multiple iterator variables
for(declaration : range) statement; - declaration represents an element in range, where range is a container such as an array or string. Helpful to use auto with declaration
myLabel: -A label
goto myLabel; - Goes to myLabel

switch (a) {
   case 0:
   //code
   break;
   
   default:
   //code
   break;
}

C-STRINGS
char myCString[5] = "text"; //Compiler automatically appends '\0' to the end. Also, the size can be omitted

char myWord[] = {'H', 'i', '\0'};
char myWord[] = "Hi";
These two are the same, and is how the string literal "Hi" is represented

#include <cstring>
strcpy(destStr, sourceStr)
strncpy(destStr, sourceStr, numChars)
strcat(destStr, sourceStr) //Adds sourceStr to end of destStr
strncat(destStr, sourceStr, numChars) //Adds numChars characters from sourceStr to end of destStr
strchr(sourceStr, searchChar) //Returns NULL or address of first occurrence
strrchr(sourceStr, searchChar) //Returns NULL or address of last occurrence
strstr(str1, str2) //Returns null, or char* pointing to first occurrence of str2 within str1
size_t strlen(sourceStr)
int strcmp(str1, str2) //0 if str1 and str2 are equal, non-zero otherwise

VECTORS/ARRAYS
vector<dataType> myVector(size);
vector<dataType> myVector(size, intialValue);
vector<dataType> myVector = {value1, value2, value3};
myVector.resize(number) //adds number elements, or removes number elements from the end
myVector.erase(myVector.begin() + index)
myVector.insert(myVector.begin() + index, value)

int myArray[columns][rows]

int foo[5] - Can have space between foo and [

Following are all equivalent
int foo[5] = {1, 2, 3, 4, 5}
int foo[] = {1, 2, 3, 4, 5}
int foo[] {1, 2, 3, 4, 5}

int myFunction(int myArray[])

FUNCTIONS
double MyFunction (double myArray[])
MyFunction(myArray) //No brackets, passed in as a pointer

BASIC INPUT/OUTPUT
cerr - standard error (output) stream, not buffered
clog - standard logging (output) stream
endl - Flushes the buffer, where '\n' doesn't
stringstream(myString) - allows myString to be treated as a stream like cin or cout

STREAMS
input.eof()
input.fail() //Returns true if previous stream operation had an error
ofstream output
input.good()
input.bad()
input.clear() //clear error state
input.ignore(maxToIgnore, stopChar) //can use numeric_limits<streamsize>::max()

#include <sstream>
istringstream iss(myString)
iss.clear() //resets the stream's state
ostringstream oss
oss.str()

cin uses whitespace as delimeter, but doesn't discard newline
getline(stream, destination) does discard newline

FILE INPUT/OUTPUT
#include <fstream>
ifstream input
input.open("myFile.txt")
if (!input.is_open()) 
input.close()
output.open("output.txt")

OUTPUT
doubles
All output modifiers persist unless mentioned otherwise
Total number of digits is equal to precision value (default is 6)
fixed: number of digits in decimal portion is equal to precision
scientific: scientific notation, number of digits in decimal portion is equal to precision
setprecision(value): sets precision
showpoint: decimal point with trailing zeros is printed
setw(width): sets the number of characters for the following output item, default is right aligned and space filled
setfill(myChar): select a different fill character other than space
left/right: alter alignment
endl: '\n' and flushes buffer]
flush: flushes buffer

CLASSES
class SecondClass {
public:
   SecondClass() {}   //Need default constructor if you have a parameterized one
   SecondClass(string input) {
   this->message = input;
   };
private:
   string message;
};

class MyClass {
public:              //Accessible from outside the class
   MyClass() {}
   MyClass(const MyClass& origClass);   //copy constructor, called when an object is passed by value into a function or created by assigning the value of one object to the other. A copy constructor is created by default, but problems can arise when a member is a pointer so you should define your own
   ~MyClass() {} //destructor (called when the object goes out of scope, or delete is called)
   MyClass(string input) : mySecondClass(input) {}   //Use constructor initializer list when you need to explicitly call a class's constructor
   int MyGetter() const;          //Function cannot mutate data members
   
   MyClass& operator=(const MyClass& objToCopy); //Use to redefine assignment operator, especially if a class has members that are pointers
   
   MyClass operator+(MyClass rightSide) {       //redefining operators
      MyClass newClass;
      newClass.myValue = myValue + rightSide.myValue;
      return newClass; 
   }
protected:   //Accessible by derived classes
private:     //Accessible within class only
   SecondClass mySecondClass;
   int myValue;
};

int MyClass::MyGetter() const {}

If you explicitly define either destructor, copy constructor, or copy assignment operator, you should explicitly define all three


Classes (I)
class Book {
public:
    Book(); //Default constructor
    Book(int); //Parameterized constructor, if you make this then you should make a default constructor because the implicit doesn't work anymore

private:
    int numPages;
} myBook;

private members (default access level) of a class are accessible only from within other members of the same class (or from their "friends").
protected members are accessible from other members of the same class (or from their "friends"), but also from members of their derived classes.

Book::Book (int pages) {
    numPages = pages;               //numPages is default constructed first, then reassigned to pages. If its type were a custom class, the class must have a default constructor defined
}

Book::Book (int pages) : numPages(pages) {} //numPages isn't default constructed

Book myBook = 4;
Book myBook {4};
Book myBook = {4};      //All 4 call parameterized constructor
Book myBook (4);

Book myBook; //Calls default constructor
Book myBook{}; //Calls default constructor
Book myBook(); //Doesn't call default constructor

Classes (II)
Overloading Operators
type operator sign (parameters) {body}

Example
#include <iostream>
using namespace std;

class CVector {
  public:
    int x,y;
    CVector operator + (const CVector&);
};

CVector CVector::operator+ (const CVector& param) {
  CVector temp;
  temp.x = x + param.x;
  temp.y = y + param.y;
  return temp;
}

c = a + b; OR c = a.operator+(b);

this
Represents a pointer to the object whose member function is being executed

INHERITANCE
class ChildClass : public ParentClass {};  //public members of base class are public in derived, protected are protectd
class ChildClass : protected ParentClass {}; //public -> protected, protected -> protected
class ChildClass : private ParentClass {};  //public -> private, protected -> private

class ChildClass : public ParentClass{
public:
   ChildClass(string myString) : ParentClass(name) {} //calling parent class constructor
   string ToString(); //Overrides base class's ToString()
};

ParentClass::ToString(); //call parent class's ToString(), if it's been overwritten

virtual void ToString(); //may be overridden in a derived class and for which runtime polymorphism is used (eg when you have a vector of object pointers)
virtual void ToString() = 0; //pure virtual function, creates an abstract class. Child classes must implement the function in order to be declared

POINTERS
int* = nullptr //pointer to an int
&myInt //address of myInt
*myPtr //dereferences myPtr

&myVariable - Returns address of myVariable
*myPointer - Returns the value of the address that myPointer is pointing to
int* myPointer, int * myPointer, int *myPointer are all equivalent
int myArray[5];
int* myPointer = myArray - Valid
*myPointer = 5; - Change first element of array
*(myPointer + 1) = 6 - Change second element of array
myPointer++ - changes myPointer to point to the next memory location (actual amount of change depends on the size of the variable that myPointer is pointing to)
const int * ptr / int const * ptr- Read the value pointed to but not write, can change the pointer though
int * const ptr - Pointer cannot be changed to reference something else, but can change the value?j
const char * foo = "Hello" - Pointers can point to string literals, as they are actually an array of characters
int ** ptr - Pointer to a pointer
void* void_ptr - Pointer to void, which can be used to point to anything, but cannot be directly dereferenced
(char*)void_ptr - Returns void_ptr as a pointer to a char?
int (*myfunction)(int, int) - pointer to a function that takes 2 ints as arguments

OTHER
enum identifier {value1, value2} //value1 defaults to 0
struct MyStruct { //Helpful to have a vector of structs
   int myInt;
}

#include <cstdlib>
rand() //Returns a random integer from 0 to RAND_MAX
rand() % x //Returns a random integer from 0 to x-1
srand(seed) //set seed, default is 1
srand(time(0)) //Uses time as seed, so the random values are different each run of the program

#include "myFile.h" //looks in the same directory as the current file
#include <stdfile> //looks in the system's standard library directory

#ifndef
#define
#endif

MODULAR COMPILATION
Each source file is separately compiled into an object file (.o)
Then the files can be linked together, and linked with libraries
This reduces the time required to recompile, especially when a change is made in just a single file

THROUGH 10